"use client"

import { useState, useRef } from "react"
import { Button } from "@/components/ui/button"
import { Play, Pause, Volume2, VolumeX } from "lucide-react"
import { motion, useScroll, useTransform } from "framer-motion"

export default function VideoShowcase() {
  const [isPlaying, setIsPlaying] = useState(false)
  const [isMuted, setIsMuted] = useState(true)
  const sectionRef = useRef<HTMLElement>(null)

  const { scrollYProgress } = useScroll({
    target: sectionRef,
    offset: ["start end", "end start"],
  })

  const opacity = useTransform(scrollYProgress, [0, 0.2, 0.8, 1], [0, 1, 1, 0])
  const y = useTransform(scrollYProgress, [0, 0.2, 0.8, 1], [100, 0, 0, -100])

  const togglePlay = () => {
    const video = document.getElementById("showcase-video") as HTMLVideoElement
    if (video.paused) {
      video.play()
      setIsPlaying(true)
    } else {
      video.pause()
      setIsPlaying(false)
    }
  }

  const toggleMute = () => {
    const video = document.getElementById("showcase-video") as HTMLVideoElement
    video.muted = !video.muted
    setIsMuted(video.muted)
  }

  // Animation variants that preserve the blur effect
  const mainVideoVariants = {
    hidden: {
      opacity: 0,
      scale: 0.95,
      transition: {
        duration: 0.7,
        ease: [0.22, 1, 0.36, 1],
      },
    },
    visible: {
      opacity: 1,
      scale: 1,
      transition: {
        duration: 0.7,
        ease: [0.22, 1, 0.36, 1],
      },
    },
  }

  const thumbnailVariants = {
    hidden: {
      opacity: 0,
      y: 50,
      transition: {
        duration: 0.8,
        ease: [0.22, 1, 0.36, 1],
      },
    },
    visible: (i: number) => ({
      opacity: 1,
      y: 0,
      transition: {
        duration: 0.8,
        delay: 0.1 * i,
        ease: [0.22, 1, 0.36, 1],
      },
    }),
  }

  return (
    <section id="showcase" ref={sectionRef} className="py-20 overflow-hidden">
      <motion.div className="container px-4 md:px-6" style={{ opacity, y }}>
        <motion.h2
          className="text-3xl md:text-4xl font-bold text-center mb-12"
          initial={{ opacity: 0, y: 20 }}
          whileInView={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
          viewport={{ once: true }}
        >
          Featured <span className="text-gray-400">Work</span>
        </motion.h2>

        <div className="max-w-4xl mx-auto">
          <div className="pre-animation-container">
            {/* Apply blur effect before animation */}
            <div className="apple-blur-heavy rounded-3xl border border-zinc-800/30 overflow-hidden absolute inset-0 opacity-0"></div>

            <motion.div
              variants={mainVideoVariants}
              initial="hidden"
              whileInView="visible"
              viewport={{ once: true }}
              className="motion-element relative"
              style={{ isolation: "isolate" }}
            >
              <div className="apple-blur-heavy rounded-3xl border border-zinc-800/30 overflow-hidden">
                <div className="p-0 relative">
                  <video
                    id="showcase-video"
                    className="w-full aspect-[9/16] md:aspect-video object-cover"
                    poster="/placeholder.svg?height=720&width=405"
                    muted
                  >
                    <source src="/VID-20250301-WA0005.mp4" type="video/mp4" />
                    Your browser does not support the video tag.
                  </video>
                  <div className="absolute bottom-0 left-0 right-0 p-4 bg-gradient-to-t from-black to-transparent">
                    <div className="flex items-center justify-between">
                      <Button variant="ghost" size="icon" onClick={togglePlay} className="text-white hover:bg-white/20">
                        {isPlaying ? <Pause className="h-6 w-6" /> : <Play className="h-6 w-6" />}
                      </Button>
                      <Button variant="ghost" size="icon" onClick={toggleMute} className="text-white hover:bg-white/20">
                        {isMuted ? <VolumeX className="h-6 w-6" /> : <Volume2 className="h-6 w-6" />}
                      </Button>
                    </div>
                  </div>
                </div>
              </div>
            </motion.div>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mt-8">
            {[1, 2, 3].map((item, index) => (
              <div key={item} className="pre-animation-container">
                {/* Apply blur effect before animation */}
                <div className="apple-blur rounded-3xl border border-zinc-800/30 overflow-hidden absolute inset-0 opacity-0"></div>

                <motion.div
                  variants={thumbnailVariants}
                  initial="hidden"
                  whileInView="visible"
                  custom={index}
                  viewport={{ once: true }}
                  whileHover={{
                    scale: 1.05,
                    transition: { duration: 0.3 },
                  }}
                  className="motion-element relative"
                  style={{ isolation: "isolate" }}
                >
                  <div className="apple-blur rounded-3xl border border-zinc-800/30 overflow-hidden">
                    <div className="p-0">
                      <div className="relative aspect-[9/16] bg-zinc-800">
                        <img
                          src={`/placeholder.svg?height=720&width=405&text=Short+${item}`}
                          alt={`YouTube Short ${item}`}
                          className="w-full h-full object-cover"
                        />
                        <motion.div
                          className="absolute inset-0 flex items-center justify-center"
                          whileHover={{
                            scale: 1.2,
                            transition: { duration: 0.3 },
                          }}
                        >
                          <Play className="h-12 w-12 text-white opacity-70" />
                        </motion.div>
                      </div>
                    </div>
                  </div>
                </motion.div>
              </div>
            ))}
          </div>
        </div>
      </motion.div>
    </section>
  )
}

